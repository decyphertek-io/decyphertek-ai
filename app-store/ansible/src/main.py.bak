import flet as ft
from functools import partial
import importlib
from pathlib import Path

# Decyphertek UI color scheme
DECYPHERTEK_DARK_BG = "#212529"
DECYPHERTEK_SIDEBAR_BG = "#343a40"
DECYPHERTEK_PRIMARY = "#007bff"
DECYPHERTEK_SUCCESS = "#28a745"
DECYPHERTEK_WARNING = "#ffc107"
DECYPHERTEK_DANGER = "#dc3545"
DECYPHERTEK_TEXT_PRIMARY = "#ffffff"
DECYPHERTEK_TEXT_SECONDARY = "#adb5bd"

class DecyphertekMainUI(ft.Container):
    def __init__(self, page):
        super().__init__()
        self.page = page
        self.current_view = "None"
        self.setup_page()
        self.content = self.build()

    def setup_page(self):
        self.page.theme_mode = ft.ThemeMode.DARK
        self.page.window_width = 1400
        self.page.window_height = 900
        self.page.title = "Decyphertek Sysadmin UI"
        self.page.padding = 0
        self.page.bgcolor = DECYPHERTEK_DARK_BG
        self.nav_items = []

    def build(self):
        self.nav_items = [
            self.create_nav_item("Dashboard", ft.Icons.DASHBOARD, True),
            self.create_nav_item("Projects", ft.Icons.FOLDER_OPEN, False),
            self.create_nav_item("Schedule", ft.Icons.SCHEDULE, False),
            self.create_nav_item("Ansible", ft.Icons.TERMINAL, False),
            self.create_nav_item("Bash Scripts", ft.Icons.LAYERS, False),
            self.create_nav_item("Networking", ft.Icons.ROUTER, False),
            self.create_nav_item("Text Editor", ft.Icons.EDIT, False),
            self.create_nav_item("Terminal", ft.Icons.TERMINAL, False),
            self.create_nav_item("Settings", ft.Icons.SETTINGS, False),
        ]

        sidebar = ft.Container(
            width=200,
            bgcolor=DECYPHERTEK_SIDEBAR_BG,
            content=ft.Column([
                ft.Container(
                    padding=ft.padding.all(15),
                    content=ft.Row([
                        ft.Icon(ft.Icons.BUSINESS, color=DECYPHERTEK_PRIMARY, size=24),
                        ft.Text("Decyphertek", size=16, weight="bold", color=DECYPHERTEK_TEXT_PRIMARY)
                    ])
                ),
                ft.Divider(color=DECYPHERTEK_TEXT_SECONDARY, height=1),
                ft.Column(self.nav_items, spacing=3)
            ])
        )

        self.header_title = ft.Text("Dashboard", size=24, weight="bold", color=DECYPHERTEK_TEXT_PRIMARY)
        header = ft.Container(
            height=60,
            bgcolor=DECYPHERTEK_SIDEBAR_BG,
            padding=ft.padding.symmetric(horizontal=20),
            content=ft.Row([
                self.header_title,
                ft.Container(expand=True),
                ft.IconButton(ft.Icons.SEARCH, icon_color=DECYPHERTEK_TEXT_SECONDARY),
                ft.IconButton(ft.Icons.NOTIFICATIONS, icon_color=DECYPHERTEK_TEXT_SECONDARY),
                ft.IconButton(ft.Icons.PERSON, icon_color=DECYPHERTEK_TEXT_SECONDARY),
            ])
        )

        self.main_content = ft.Container(expand=True, padding=20)

        return ft.Row([
            sidebar,
            ft.VerticalDivider(width=1, color=DECYPHERTEK_TEXT_SECONDARY),
            ft.Column([header, ft.Divider(height=1, color=DECYPHERTEK_TEXT_SECONDARY), self.main_content], expand=True, spacing=0)
        ], expand=True, spacing=0, vertical_alignment=ft.CrossAxisAlignment.STRETCH)
    

    def create_stat_card(self, value, label):
        return ft.Container(
            width=200,
            height=130,
            bgcolor=DECYPHERTEK_SIDEBAR_BG,
            border_radius=10,
            padding=ft.padding.all(15),
            content=ft.Column([
                ft.Text(value, size=32, weight="bold", color=DECYPHERTEK_PRIMARY),
                ft.Text(label, size=16, color=DECYPHERTEK_TEXT_SECONDARY, text_align=ft.TextAlign.CENTER)
            ],
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            alignment=ft.MainAxisAlignment.CENTER,
            spacing=10)
        )

    def create_nav_item(self, label, icon, is_selected):
        return ft.Container(
            padding=ft.padding.symmetric(horizontal=12, vertical=8),
            bgcolor=DECYPHERTEK_PRIMARY if is_selected else DECYPHERTEK_SIDEBAR_BG,
            border_radius=5,
            content=ft.Row([
                ft.Icon(icon, color=DECYPHERTEK_TEXT_PRIMARY, size=18),
                ft.Text(label, color=DECYPHERTEK_TEXT_PRIMARY, size=14)
            ]),
            on_click=lambda e, view=label: self.switch_view(view),
            data=label
        )

    def switch_view(self, view_name: str):
        # Update header and navigation item selection
        self.header_title.value = view_name
        for item in self.nav_items:
            item.bgcolor = DECYPHERTEK_PRIMARY if item.data == view_name else DECYPHERTEK_SIDEBAR_BG
            item.update()

        module_name = view_name.lower().replace(" ", "_")
        try:
            # Dynamically import the module
            spec = importlib.util.spec_from_file_location(module_name, f"src/{module_name}.py")
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)

            # Assuming the module has a function `create_view()` that returns a Flet control
            if hasattr(module, 'create_view') and callable(getattr(module, 'create_view')):
                self.main_content.content = module.create_view()
            else:
                self.main_content.content = ft.Text(f"ERROR: 'create_view' function not found in {module_name}.py", color=DECYPHERTEK_DANGER)

        except FileNotFoundError:
            self.main_content.content = ft.Text(f"ERROR: {module_name}.py not found.", color=DECYPHERTEK_DANGER)
        except Exception as e:
            self.main_content.content = ft.Text(f"ERROR: Failed to load {module_name}.py: {e}", color=DECYPHERTEK_DANGER)

        self.page.update()

def main(page: ft.Page):
    ui = DecyphertekMainUI(page)
    page.add(ui)
    ui.switch_view("Dashboard")

if __name__ == "__main__":
    ft.app(target=main)